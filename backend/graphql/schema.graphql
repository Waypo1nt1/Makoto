# !Input

input SignUpInput {
  username: String!
  password: String!
  question: String!
  answer: String!
}

input SignInInput {
  username: String!
  password: String!
}

input ChangePasswordInput {
  password: String!
}

input ChangePasswordByAnswerInput {
  change: ChangePasswordInput!
  answer: String!
}

#
input GetUserByIdInput {
  userId: ID!
}

input GetUserByUsernameInput {
  username: String!
}


# ! polimorphism no tame ni (Response)
type Tokens {
  access_token: String!
  refresh_token: String!
}

# !Responses
type UserAuthResponse {
  tokens: Tokens!
  userId: ID!
}

type UserResponse {
  auth: UserAuthResponse!
  username: String!
}

type UserQuestionResponse {
  auth: UserAuthResponse!
  question: String!
}

# !Mutations
type Mutation {
  # No token required
  signUp(input: SignUpInput!): UserAuthResponse! # returns tokens and user_id
  signIn(input: SignInInput!): UserAuthResponse!
  # With token
  signOut: Boolean!
  changePassword(input: ChangePasswordInput!): UserAuthResponse!
  changePasswordByAnswer(input: ChangePasswordByAnswerInput!): UserAuthResponse!
}

type Query {
  # always with token
  getUserByUsername(input: GetUserByUsernameInput!): UserResponse!
  getUserById(input: GetUserByIdInput!): UserResponse!
  getQuestion: UserQuestionResponse!
}
