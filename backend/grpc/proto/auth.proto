syntax = "proto3";

option go_package = "github.com/dehwyy/Makoto/backend/grpc/authGrpc";

package authGrpc;

// Types

message TypeTokens {
  string access_token = 1;
  string refresh_token = 2;
}

// Requests

// QUERIES
message UserGetQuestionRequest {
  string user_id = 1;
}

message UserGetRequest {
  oneof find_by {
    string user_id = 1;
    string username = 2;
  }
}

// MUTATIONS
message UserSignUpRequest {
  string username = 1;
  string password = 2;
  string question = 3;
  string answer = 4;
}

message UserSignInRequest {
  string username = 1;
  string password = 2;
}

message UserChangePasswordRequest {
  string old_password = 1;
}

message UserSendAnswerAndChangePasswordRequest {
  string answer = 1;
  string old_password = 2;
}


message AccessToken {
  string access_token = 1;
}

// responses

// Only no token required (no auth required) request OR ValidateAuth
message UserResponse {
  string user_id = 1;
  string access_token = 2;
  string refresh_token = 3;
}


message UserQuestionResponse {
  string question = 1;
}

message UserDataResponse {
  string username = 1;
}

message UserChangePasswordResponse {
}

service User {
  // mutation && no token (on each request tokens pair would generate and save to db)
  rpc SignUp(UserSignUpRequest) returns (UserResponse); // done
  rpc SignIn(UserSignInRequest) returns (UserResponse); // done
  rpc ValidateAuth(AccessToken) returns (UserResponse); // done

  // With token ( authed )
  // query
  rpc GetQuestion(UserGetQuestionRequest) returns (UserQuestionResponse);
  rpc GetUser(UserGetRequest) returns (UserDataResponse);
  // mutation
  rpc RecoverPasswordByQuestion(UserSendAnswerAndChangePasswordRequest) returns (UserChangePasswordResponse);
  rpc ChangePassword(UserChangePasswordRequest) returns (UserChangePasswordResponse);
}
